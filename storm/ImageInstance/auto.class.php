<?php

/**
 * # CAUTION #
 *
 * Autogenerated code. Any changes in this file will be lost.
 * To add extra behaviour, please, edit the extended class (extended.class.php)
 *
*/

class ImageInstance_auto {

	public static $fields = array (
  'Description' => 
  array (
    'type' => 'Text',
    'native' => true,
  ),
  'Width' => 
  array (
    'type' => 'Number',
    'native' => true,
  ),
  'Height' => 
  array (
    'type' => 'Number',
    'native' => true,
  ),
  'Align' => 
  array (
    'type' => 'Text',
    'native' => true,
  ),
  'Name' => 
  array (
    'type' => 'Text',
    'native' => true,
  ),
  'Image' => 
  array (
    'type' => 'Text',
    'native' => true,
  ),
);

	protected static $data = array();

	protected $id;
	protected $timestamp;
	protected $operation;
	public $row;

	public function __construct(&$row) {
		$this->id = $row['id'];
		$this->timestamp = $row['__timestamp__'];
		$this->operation = $row['__operation__'];
		$this->row = $row;
	}

	public function RAW($field) {
		if (array_key_exists($field, $this->row)) {
			return $this->row[$field];
		}
		return null;
	}

	public static function PREFETCH($field, $collection) {
		$IDs = array();
		foreach ($collection as $item) {
			$IDs[] = $item->RAW($field);
		}
		$IDs = array_unique($IDs);
		if (count($IDs)) {
			$implode = implode(',', $IDs);
			return self::SELECT(" Id IN ($implode) ");
		}
		return array();
	}

	public static function SELECT($where=null) {
		$sql = "SELECT * FROM `ImageInstance`";
		if ($where !== null)
			$sql .= " WHERE ".$where;

		$select = array();
		$result = Database::sql($sql);
		while ($result && $row=$result->fetch_assoc()) {
			$id = $row['id'];
			if (!array_key_exists($id, self::$data))
				self::$data[$id] = new ImageInstance($row);
			$select[] = &self::$data[$id];
		}
		return $select;
	}
	
	public static function INSERT() {
		$sql = "INSERT INTO `ImageInstance` (`id`, `__timestamp__`, `__operation__`) VALUES (NULL, ".time().", 'INSERT')";
		$result = Database::sql($sql);
		$id = Database::getInsertId();
		return self::ROW($id);
	}

	public static function ROW($id) {
		$id = intval($id);
		if (array_key_exists($id, self::$data)) {
			return self::$data[$id];
		} else {
			$rows = self::SELECT("id='".Database::escape($id)."'");
			if (count($rows)) {
				return $rows[0];
			} else {
				return null;
			}
		}
	}

	public function DELETE($physical=true) {
		if ($physical) {
			$sql = "DELETE FROM `ImageInstance` WHERE id='".$this->id."'";
			unset(self::$data[$this->id]);
		} else {
			$sql = "UPDATE `ImageInstance` SET `__timestamp__` = ".time().", `__operation__` = 'DELETE' WHERE `id`='".$this->id."'";
		}
		Database::sql($sql);
	}

	/* Deprecated */
	public final function getId() {
		return intval($this->id);
	}

	public final function ID() {
		return intval($this->id);
	}

	public final function TIMESTAMP() {
		return intval($this->timestamp);
	}

	public final function OPERATION() {
		return $this->operation;
	}

	public final function getClassName() {
		return 'ImageInstance';
	}

	public function toString() {
		return "ImageInstance[{$this->id}]";
	}

	// Setters and Getters
public function setDescription($value) { $this->row['Description'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Description`='$value',`__timestamp__` = $timestamp, `__operation__` = 'UPDATE' WHERE `id`='{$this->id}'"; Database::sql($sql);} public function getDescription() { return $this->row['Description']; }

public function setWidth($value) { $value = str_replace(',', '.', $value); $this->row['Width'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Width`='$value', `__timestamp__` = $timestamp, `__operation__` = 'UPDATE'  WHERE `id`='{$this->id}'"; Database::sql($sql); } public function getWidth() { $value = $this->row['Width']; settype($value, 'float'); return $value; }

public function setHeight($value) { $value = str_replace(',', '.', $value); $this->row['Height'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Height`='$value', `__timestamp__` = $timestamp, `__operation__` = 'UPDATE'  WHERE `id`='{$this->id}'"; Database::sql($sql); } public function getHeight() { $value = $this->row['Height']; settype($value, 'float'); return $value; }

public function setAlign($value) { $this->row['Align'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Align`='$value',`__timestamp__` = $timestamp, `__operation__` = 'UPDATE' WHERE `id`='{$this->id}'"; Database::sql($sql);} public function getAlign() { return $this->row['Align']; }

public function setName($value) { $this->row['Name'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Name`='$value',`__timestamp__` = $timestamp, `__operation__` = 'UPDATE' WHERE `id`='{$this->id}'"; Database::sql($sql);} public function getName() { return $this->row['Name']; }

public function setImage($value) { $this->row['Image'] = $value; $value = Database::escape($value); $timestamp = time(); $sql = "UPDATE `ImageInstance` SET `Image`='$value',`__timestamp__` = $timestamp, `__operation__` = 'UPDATE' WHERE `id`='{$this->id}'"; Database::sql($sql);} public function getImage() { return $this->row['Image']; }


}
